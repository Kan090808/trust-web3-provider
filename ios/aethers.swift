// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!
import Foundation

// Depending on the consumer's build setup, the low-level FFI code
// might be in a separate module, or it might be compiled inline into
// this module. This is a bit of light hackery to work with both.
#if canImport(aethersFFI)
import aethersFFI
#endif

fileprivate extension RustBuffer {
    // Allocate a new buffer, copying the contents of a `UInt8` array.
    init(bytes: [UInt8]) {
        let rbuf = bytes.withUnsafeBufferPointer { ptr in
            RustBuffer.from(ptr)
        }
        self.init(capacity: rbuf.capacity, len: rbuf.len, data: rbuf.data)
    }

    static func from(_ ptr: UnsafeBufferPointer<UInt8>) -> RustBuffer {
        try! rustCall { ffi_aethers_rustbuffer_from_bytes(ForeignBytes(bufferPointer: ptr), $0) }
    }

    // Frees the buffer in place.
    // The buffer must not be used after this is called.
    func deallocate() {
        try! rustCall { ffi_aethers_rustbuffer_free(self, $0) }
    }
}

fileprivate extension ForeignBytes {
    init(bufferPointer: UnsafeBufferPointer<UInt8>) {
        self.init(len: Int32(bufferPointer.count), data: bufferPointer.baseAddress)
    }
}

// For every type used in the interface, we provide helper methods for conveniently
// lifting and lowering that type from C-compatible data, and for reading and writing
// values of that type in a buffer.

// Helper classes/extensions that don't change.
// Someday, this will be in a library of its own.

fileprivate extension Data {
    init(rustBuffer: RustBuffer) {
        // TODO: This copies the buffer. Can we read directly from a
        // Rust buffer?
        self.init(bytes: rustBuffer.data!, count: Int(rustBuffer.len))
    }
}

// Define reader functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.
//
// With external types, one swift source file needs to be able to call the read
// method on another source file's FfiConverter, but then what visibility
// should Reader have?
// - If Reader is fileprivate, then this means the read() must also
//   be fileprivate, which doesn't work with external types.
// - If Reader is internal/public, we'll get compile errors since both source
//   files will try define the same type.
//
// Instead, the read() method and these helper functions input a tuple of data

fileprivate func createReader(data: Data) -> (data: Data, offset: Data.Index) {
    (data: data, offset: 0)
}

// Reads an integer at the current offset, in big-endian order, and advances
// the offset on success. Throws if reading the integer would move the
// offset past the end of the buffer.
fileprivate func readInt<T: FixedWidthInteger>(_ reader: inout (data: Data, offset: Data.Index)) throws -> T {
    let range = reader.offset..<reader.offset + MemoryLayout<T>.size
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    if T.self == UInt8.self {
        let value = reader.data[reader.offset]
        reader.offset += 1
        return value as! T
    }
    var value: T = 0
    let _ = withUnsafeMutableBytes(of: &value, { reader.data.copyBytes(to: $0, from: range)})
    reader.offset = range.upperBound
    return value.bigEndian
}

// Reads an arbitrary number of bytes, to be used to read
// raw bytes, this is useful when lifting strings
fileprivate func readBytes(_ reader: inout (data: Data, offset: Data.Index), count: Int) throws -> Array<UInt8> {
    let range = reader.offset..<(reader.offset+count)
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    var value = [UInt8](repeating: 0, count: count)
    value.withUnsafeMutableBufferPointer({ buffer in
        reader.data.copyBytes(to: buffer, from: range)
    })
    reader.offset = range.upperBound
    return value
}

// Reads a float at the current offset.
fileprivate func readFloat(_ reader: inout (data: Data, offset: Data.Index)) throws -> Float {
    return Float(bitPattern: try readInt(&reader))
}

// Reads a float at the current offset.
fileprivate func readDouble(_ reader: inout (data: Data, offset: Data.Index)) throws -> Double {
    return Double(bitPattern: try readInt(&reader))
}

// Indicates if the offset has reached the end of the buffer.
fileprivate func hasRemaining(_ reader: (data: Data, offset: Data.Index)) -> Bool {
    return reader.offset < reader.data.count
}

// Define writer functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.  See the above discussion on Readers for details.

fileprivate func createWriter() -> [UInt8] {
    return []
}

fileprivate func writeBytes<S>(_ writer: inout [UInt8], _ byteArr: S) where S: Sequence, S.Element == UInt8 {
    writer.append(contentsOf: byteArr)
}

// Writes an integer in big-endian order.
//
// Warning: make sure what you are trying to write
// is in the correct type!
fileprivate func writeInt<T: FixedWidthInteger>(_ writer: inout [UInt8], _ value: T) {
    var value = value.bigEndian
    withUnsafeBytes(of: &value) { writer.append(contentsOf: $0) }
}

fileprivate func writeFloat(_ writer: inout [UInt8], _ value: Float) {
    writeInt(&writer, value.bitPattern)
}

fileprivate func writeDouble(_ writer: inout [UInt8], _ value: Double) {
    writeInt(&writer, value.bitPattern)
}

// Protocol for types that transfer other types across the FFI. This is
// analogous go the Rust trait of the same name.
fileprivate protocol FfiConverter {
    associatedtype FfiType
    associatedtype SwiftType

    static func lift(_ value: FfiType) throws -> SwiftType
    static func lower(_ value: SwiftType) -> FfiType
    static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType
    static func write(_ value: SwiftType, into buf: inout [UInt8])
}

// Types conforming to `Primitive` pass themselves directly over the FFI.
fileprivate protocol FfiConverterPrimitive: FfiConverter where FfiType == SwiftType { }

extension FfiConverterPrimitive {
    public static func lift(_ value: FfiType) throws -> SwiftType {
        return value
    }

    public static func lower(_ value: SwiftType) -> FfiType {
        return value
    }
}

// Types conforming to `FfiConverterRustBuffer` lift and lower into a `RustBuffer`.
// Used for complex types where it's hard to write a custom lift/lower.
fileprivate protocol FfiConverterRustBuffer: FfiConverter where FfiType == RustBuffer {}

extension FfiConverterRustBuffer {
    public static func lift(_ buf: RustBuffer) throws -> SwiftType {
        var reader = createReader(data: Data(rustBuffer: buf))
        let value = try read(from: &reader)
        if hasRemaining(reader) {
            throw UniffiInternalError.incompleteData
        }
        buf.deallocate()
        return value
    }

    public static func lower(_ value: SwiftType) -> RustBuffer {
          var writer = createWriter()
          write(value, into: &writer)
          return RustBuffer(bytes: writer)
    }
}
// An error type for FFI errors. These errors occur at the UniFFI level, not
// the library level.
fileprivate enum UniffiInternalError: LocalizedError {
    case bufferOverflow
    case incompleteData
    case unexpectedOptionalTag
    case unexpectedEnumCase
    case unexpectedNullPointer
    case unexpectedRustCallStatusCode
    case unexpectedRustCallError
    case unexpectedStaleHandle
    case rustPanic(_ message: String)

    public var errorDescription: String? {
        switch self {
        case .bufferOverflow: return "Reading the requested value would read past the end of the buffer"
        case .incompleteData: return "The buffer still has data after lifting its containing value"
        case .unexpectedOptionalTag: return "Unexpected optional tag; should be 0 or 1"
        case .unexpectedEnumCase: return "Raw enum value doesn't match any cases"
        case .unexpectedNullPointer: return "Raw pointer value was null"
        case .unexpectedRustCallStatusCode: return "Unexpected RustCallStatus code"
        case .unexpectedRustCallError: return "CALL_ERROR but no errorClass specified"
        case .unexpectedStaleHandle: return "The object in the handle map has been dropped already"
        case let .rustPanic(message): return message
        }
    }
}

fileprivate let CALL_SUCCESS: Int8 = 0
fileprivate let CALL_ERROR: Int8 = 1
fileprivate let CALL_PANIC: Int8 = 2
fileprivate let CALL_CANCELLED: Int8 = 3

fileprivate extension RustCallStatus {
    init() {
        self.init(
            code: CALL_SUCCESS,
            errorBuf: RustBuffer.init(
                capacity: 0,
                len: 0,
                data: nil
            )
        )
    }
}

private func rustCall<T>(_ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    try makeRustCall(callback, errorHandler: nil)
}

private func rustCallWithError<T>(
    _ errorHandler: @escaping (RustBuffer) throws -> Error,
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    try makeRustCall(callback, errorHandler: errorHandler)
}

private func makeRustCall<T>(
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T,
    errorHandler: ((RustBuffer) throws -> Error)?
) throws -> T {
    uniffiEnsureInitialized()
    var callStatus = RustCallStatus.init()
    let returnedVal = callback(&callStatus)
    try uniffiCheckCallStatus(callStatus: callStatus, errorHandler: errorHandler)
    return returnedVal
}

private func uniffiCheckCallStatus(
    callStatus: RustCallStatus,
    errorHandler: ((RustBuffer) throws -> Error)?
) throws {
    switch callStatus.code {
        case CALL_SUCCESS:
            return

        case CALL_ERROR:
            if let errorHandler = errorHandler {
                throw try errorHandler(callStatus.errorBuf)
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.unexpectedRustCallError
            }

        case CALL_PANIC:
            // When the rust code sees a panic, it tries to construct a RustBuffer
            // with the message.  But if that code panics, then it just sends back
            // an empty buffer.
            if callStatus.errorBuf.len > 0 {
                throw UniffiInternalError.rustPanic(try FfiConverterString.lift(callStatus.errorBuf))
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.rustPanic("Rust panic")
            }

        case CALL_CANCELLED:
                throw CancellationError()

        default:
            throw UniffiInternalError.unexpectedRustCallStatusCode
    }
}

// Public interface members begin here.


fileprivate struct FfiConverterUInt8: FfiConverterPrimitive {
    typealias FfiType = UInt8
    typealias SwiftType = UInt8

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt8 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: UInt8, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

fileprivate struct FfiConverterUInt64: FfiConverterPrimitive {
    typealias FfiType = UInt64
    typealias SwiftType = UInt64

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt64 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

fileprivate struct FfiConverterString: FfiConverter {
    typealias SwiftType = String
    typealias FfiType = RustBuffer

    public static func lift(_ value: RustBuffer) throws -> String {
        defer {
            value.deallocate()
        }
        if value.data == nil {
            return String()
        }
        let bytes = UnsafeBufferPointer<UInt8>(start: value.data!, count: Int(value.len))
        return String(bytes: bytes, encoding: String.Encoding.utf8)!
    }

    public static func lower(_ value: String) -> RustBuffer {
        return value.utf8CString.withUnsafeBufferPointer { ptr in
            // The swift string gives us int8_t, we want uint8_t.
            ptr.withMemoryRebound(to: UInt8.self) { ptr in
                // The swift string gives us a trailing null byte, we don't want it.
                let buf = UnsafeBufferPointer(rebasing: ptr.prefix(upTo: ptr.count - 1))
                return RustBuffer.from(buf)
            }
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> String {
        let len: Int32 = try readInt(&buf)
        return String(bytes: try readBytes(&buf, count: Int(len)), encoding: String.Encoding.utf8)!
    }

    public static func write(_ value: String, into buf: inout [UInt8]) {
        let len = Int32(value.utf8.count)
        writeInt(&buf, len)
        writeBytes(&buf, value.utf8)
    }
}


public protocol ChainProviderProtocol {
    
}

public class ChainProvider: ChainProviderProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    deinit {
        try! rustCall { uniffi_aethers_fn_free_chainprovider(pointer, $0) }
    }

    

    
    
}

public struct FfiConverterTypeChainProvider: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = ChainProvider

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ChainProvider {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: ChainProvider, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> ChainProvider {
        return ChainProvider(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: ChainProvider) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}


public func FfiConverterTypeChainProvider_lift(_ pointer: UnsafeMutableRawPointer) throws -> ChainProvider {
    return try FfiConverterTypeChainProvider.lift(pointer)
}

public func FfiConverterTypeChainProvider_lower(_ value: ChainProvider) -> UnsafeMutableRawPointer {
    return FfiConverterTypeChainProvider.lower(value)
}


public protocol Erc20ContractProtocol {
    func tokenApprove(spender: String, value: UInt64)  throws -> String
    func tokenBalanceOf(address: String)  throws -> UInt64
    func tokenDecimals()  throws -> UInt64
    func tokenTransfer(to: String, value: UInt64)  throws -> String
    func tokenTransferFrom(from: String, to: String, value: UInt64)  throws -> String
    func transferBridgeOut(to: String, value: UInt64, chainId: UInt64, chainType: UInt64)  throws -> String
    
}

public class Erc20Contract: Erc20ContractProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }
    public convenience init(address: String, provider: ChainProvider, wallet: Wallet) throws {
        self.init(unsafeFromRawPointer: try rustCallWithError(FfiConverterTypeContractError.lift) {
    uniffi_aethers_fn_constructor_erc20contract_new(
        FfiConverterString.lower(address),
        FfiConverterTypeChainProvider.lower(provider),
        FfiConverterTypeWallet.lower(wallet),$0)
})
    }

    deinit {
        try! rustCall { uniffi_aethers_fn_free_erc20contract(pointer, $0) }
    }

    

    
    

    public func tokenApprove(spender: String, value: UInt64) throws -> String {
        return try  FfiConverterString.lift(
            try 
    rustCallWithError(FfiConverterTypeContractError.lift) {
    uniffi_aethers_fn_method_erc20contract_token_approve(self.pointer, 
        FfiConverterString.lower(spender),
        FfiConverterUInt64.lower(value),$0
    )
}
        )
    }

    public func tokenBalanceOf(address: String) throws -> UInt64 {
        return try  FfiConverterUInt64.lift(
            try 
    rustCallWithError(FfiConverterTypeContractError.lift) {
    uniffi_aethers_fn_method_erc20contract_token_balance_of(self.pointer, 
        FfiConverterString.lower(address),$0
    )
}
        )
    }

    public func tokenDecimals() throws -> UInt64 {
        return try  FfiConverterUInt64.lift(
            try 
    rustCallWithError(FfiConverterTypeContractError.lift) {
    uniffi_aethers_fn_method_erc20contract_token_decimals(self.pointer, $0
    )
}
        )
    }

    public func tokenTransfer(to: String, value: UInt64) throws -> String {
        return try  FfiConverterString.lift(
            try 
    rustCallWithError(FfiConverterTypeContractError.lift) {
    uniffi_aethers_fn_method_erc20contract_token_transfer(self.pointer, 
        FfiConverterString.lower(to),
        FfiConverterUInt64.lower(value),$0
    )
}
        )
    }

    public func tokenTransferFrom(from: String, to: String, value: UInt64) throws -> String {
        return try  FfiConverterString.lift(
            try 
    rustCallWithError(FfiConverterTypeContractError.lift) {
    uniffi_aethers_fn_method_erc20contract_token_transfer_from(self.pointer, 
        FfiConverterString.lower(from),
        FfiConverterString.lower(to),
        FfiConverterUInt64.lower(value),$0
    )
}
        )
    }

    public func transferBridgeOut(to: String, value: UInt64, chainId: UInt64, chainType: UInt64) throws -> String {
        return try  FfiConverterString.lift(
            try 
    rustCallWithError(FfiConverterTypeContractError.lift) {
    uniffi_aethers_fn_method_erc20contract_transfer_bridge_out(self.pointer, 
        FfiConverterString.lower(to),
        FfiConverterUInt64.lower(value),
        FfiConverterUInt64.lower(chainId),
        FfiConverterUInt64.lower(chainType),$0
    )
}
        )
    }
}

public struct FfiConverterTypeErc20Contract: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = Erc20Contract

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Erc20Contract {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: Erc20Contract, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> Erc20Contract {
        return Erc20Contract(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: Erc20Contract) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}


public func FfiConverterTypeErc20Contract_lift(_ pointer: UnsafeMutableRawPointer) throws -> Erc20Contract {
    return try FfiConverterTypeErc20Contract.lift(pointer)
}

public func FfiConverterTypeErc20Contract_lower(_ value: Erc20Contract) -> UnsafeMutableRawPointer {
    return FfiConverterTypeErc20Contract.lower(value)
}


public protocol Erc721ContractProtocol {
    func nftCurrentPrice()  throws -> UInt64
    func nftMint(to: String, value: UInt64)  throws -> String
    func nftOwnerOf(tokenId: UInt64)  throws -> String
    func nftSafeTransferFrom(to: String, tokenId: UInt64)  throws -> String
    func nftTotalSupply()  throws -> UInt64
    
}

public class Erc721Contract: Erc721ContractProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }
    public convenience init(address: String, provider: ChainProvider, wallet: Wallet) throws {
        self.init(unsafeFromRawPointer: try rustCallWithError(FfiConverterTypeContractError.lift) {
    uniffi_aethers_fn_constructor_erc721contract_new(
        FfiConverterString.lower(address),
        FfiConverterTypeChainProvider.lower(provider),
        FfiConverterTypeWallet.lower(wallet),$0)
})
    }

    deinit {
        try! rustCall { uniffi_aethers_fn_free_erc721contract(pointer, $0) }
    }

    

    
    

    public func nftCurrentPrice() throws -> UInt64 {
        return try  FfiConverterUInt64.lift(
            try 
    rustCallWithError(FfiConverterTypeContractError.lift) {
    uniffi_aethers_fn_method_erc721contract_nft_current_price(self.pointer, $0
    )
}
        )
    }

    public func nftMint(to: String, value: UInt64) throws -> String {
        return try  FfiConverterString.lift(
            try 
    rustCallWithError(FfiConverterTypeContractError.lift) {
    uniffi_aethers_fn_method_erc721contract_nft_mint(self.pointer, 
        FfiConverterString.lower(to),
        FfiConverterUInt64.lower(value),$0
    )
}
        )
    }

    public func nftOwnerOf(tokenId: UInt64) throws -> String {
        return try  FfiConverterString.lift(
            try 
    rustCallWithError(FfiConverterTypeContractError.lift) {
    uniffi_aethers_fn_method_erc721contract_nft_owner_of(self.pointer, 
        FfiConverterUInt64.lower(tokenId),$0
    )
}
        )
    }

    public func nftSafeTransferFrom(to: String, tokenId: UInt64) throws -> String {
        return try  FfiConverterString.lift(
            try 
    rustCallWithError(FfiConverterTypeContractError.lift) {
    uniffi_aethers_fn_method_erc721contract_nft_safe_transfer_from(self.pointer, 
        FfiConverterString.lower(to),
        FfiConverterUInt64.lower(tokenId),$0
    )
}
        )
    }

    public func nftTotalSupply() throws -> UInt64 {
        return try  FfiConverterUInt64.lift(
            try 
    rustCallWithError(FfiConverterTypeContractError.lift) {
    uniffi_aethers_fn_method_erc721contract_nft_total_supply(self.pointer, $0
    )
}
        )
    }
}

public struct FfiConverterTypeErc721Contract: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = Erc721Contract

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Erc721Contract {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: Erc721Contract, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> Erc721Contract {
        return Erc721Contract(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: Erc721Contract) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}


public func FfiConverterTypeErc721Contract_lift(_ pointer: UnsafeMutableRawPointer) throws -> Erc721Contract {
    return try FfiConverterTypeErc721Contract.lift(pointer)
}

public func FfiConverterTypeErc721Contract_lower(_ value: Erc721Contract) -> UnsafeMutableRawPointer {
    return FfiConverterTypeErc721Contract.lower(value)
}


public protocol WalletProtocol {
    func chainId()   -> UInt64
    func encryptJson()  throws -> String
    func recoverPhrase(password: String)  throws -> String
    func requestAccounts()   -> [String]
    func sendTransaction(provider: ChainProvider, payload: String)  throws -> String
    func signTypedMessage(message: [UInt8])  throws -> String
    func switchChain(chainId: UInt64)  
    
}

public class Wallet: WalletProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }
    public convenience init(password: String, chainId: UInt64)  {
        self.init(unsafeFromRawPointer: try! rustCall() {
    uniffi_aethers_fn_constructor_wallet_new(
        FfiConverterString.lower(password),
        FfiConverterUInt64.lower(chainId),$0)
})
    }

    deinit {
        try! rustCall { uniffi_aethers_fn_free_wallet(pointer, $0) }
    }

    

    
    

    public func chainId()  -> UInt64 {
        return try!  FfiConverterUInt64.lift(
            try! 
    rustCall() {
    
    uniffi_aethers_fn_method_wallet_chain_id(self.pointer, $0
    )
}
        )
    }

    public func encryptJson() throws -> String {
        return try  FfiConverterString.lift(
            try 
    rustCallWithError(FfiConverterTypeWalletError.lift) {
    uniffi_aethers_fn_method_wallet_encrypt_json(self.pointer, $0
    )
}
        )
    }

    public func recoverPhrase(password: String) throws -> String {
        return try  FfiConverterString.lift(
            try 
    rustCallWithError(FfiConverterTypeWalletError.lift) {
    uniffi_aethers_fn_method_wallet_recover_phrase(self.pointer, 
        FfiConverterString.lower(password),$0
    )
}
        )
    }

    public func requestAccounts()  -> [String] {
        return try!  FfiConverterSequenceString.lift(
            try! 
    rustCall() {
    
    uniffi_aethers_fn_method_wallet_request_accounts(self.pointer, $0
    )
}
        )
    }

    public func sendTransaction(provider: ChainProvider, payload: String) throws -> String {
        return try  FfiConverterString.lift(
            try 
    rustCallWithError(FfiConverterTypeWalletError.lift) {
    uniffi_aethers_fn_method_wallet_send_transaction(self.pointer, 
        FfiConverterTypeChainProvider.lower(provider),
        FfiConverterString.lower(payload),$0
    )
}
        )
    }

    public func signTypedMessage(message: [UInt8]) throws -> String {
        return try  FfiConverterString.lift(
            try 
    rustCallWithError(FfiConverterTypeWalletError.lift) {
    uniffi_aethers_fn_method_wallet_sign_typed_message(self.pointer, 
        FfiConverterSequenceUInt8.lower(message),$0
    )
}
        )
    }

    public func switchChain(chainId: UInt64)  {
        try! 
    rustCall() {
    
    uniffi_aethers_fn_method_wallet_switch_chain(self.pointer, 
        FfiConverterUInt64.lower(chainId),$0
    )
}
    }
}

public struct FfiConverterTypeWallet: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = Wallet

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Wallet {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: Wallet, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> Wallet {
        return Wallet(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: Wallet) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}


public func FfiConverterTypeWallet_lift(_ pointer: UnsafeMutableRawPointer) throws -> Wallet {
    return try FfiConverterTypeWallet.lift(pointer)
}

public func FfiConverterTypeWallet_lower(_ value: Wallet) -> UnsafeMutableRawPointer {
    return FfiConverterTypeWallet.lower(value)
}

public enum ContractError {

    
    
    // Simple error enums only carry a message
    case InvalidAddress(message: String)
    
    // Simple error enums only carry a message
    case LoadAbiError(message: String)
    
    // Simple error enums only carry a message
    case Serde(message: String)
    
    // Simple error enums only carry a message
    case AbiError(message: String)
    
    // Simple error enums only carry a message
    case Provider(message: String)
    
    // Simple error enums only carry a message
    case Wallet(message: String)
    
    // Simple error enums only carry a message
    case ChainIdMismatch(message: String)
    

    fileprivate static func uniffiErrorHandler(_ error: RustBuffer) throws -> Error {
        return try FfiConverterTypeContractError.lift(error)
    }
}


public struct FfiConverterTypeContractError: FfiConverterRustBuffer {
    typealias SwiftType = ContractError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ContractError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .InvalidAddress(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 2: return .LoadAbiError(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 3: return .Serde(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 4: return .AbiError(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 5: return .Provider(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 6: return .Wallet(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 7: return .ChainIdMismatch(
            message: try FfiConverterString.read(from: &buf)
        )
        

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: ContractError, into buf: inout [UInt8]) {
        switch value {

        

        
        case .InvalidAddress(_ /* message is ignored*/):
            writeInt(&buf, Int32(1))
        case .LoadAbiError(_ /* message is ignored*/):
            writeInt(&buf, Int32(2))
        case .Serde(_ /* message is ignored*/):
            writeInt(&buf, Int32(3))
        case .AbiError(_ /* message is ignored*/):
            writeInt(&buf, Int32(4))
        case .Provider(_ /* message is ignored*/):
            writeInt(&buf, Int32(5))
        case .Wallet(_ /* message is ignored*/):
            writeInt(&buf, Int32(6))
        case .ChainIdMismatch(_ /* message is ignored*/):
            writeInt(&buf, Int32(7))

        
        }
    }
}


extension ContractError: Equatable, Hashable {}

extension ContractError: Error { }

public enum ProviderError {

    
    
    // Simple error enums only carry a message
    case Runtime(message: String)
    
    // Simple error enums only carry a message
    case Parse(message: String)
    
    // Simple error enums only carry a message
    case Inner(message: String)
    
    // Simple error enums only carry a message
    case FromAddressMissing(message: String)
    

    fileprivate static func uniffiErrorHandler(_ error: RustBuffer) throws -> Error {
        return try FfiConverterTypeProviderError.lift(error)
    }
}


public struct FfiConverterTypeProviderError: FfiConverterRustBuffer {
    typealias SwiftType = ProviderError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ProviderError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .Runtime(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 2: return .Parse(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 3: return .Inner(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 4: return .FromAddressMissing(
            message: try FfiConverterString.read(from: &buf)
        )
        

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: ProviderError, into buf: inout [UInt8]) {
        switch value {

        

        
        case .Runtime(_ /* message is ignored*/):
            writeInt(&buf, Int32(1))
        case .Parse(_ /* message is ignored*/):
            writeInt(&buf, Int32(2))
        case .Inner(_ /* message is ignored*/):
            writeInt(&buf, Int32(3))
        case .FromAddressMissing(_ /* message is ignored*/):
            writeInt(&buf, Int32(4))

        
        }
    }
}


extension ProviderError: Equatable, Hashable {}

extension ProviderError: Error { }

public enum WalletError {

    
    
    // Simple error enums only carry a message
    case DerivationParse(message: String)
    
    // Simple error enums only carry a message
    case Mnemonic(message: String)
    
    // Simple error enums only carry a message
    case Signature(message: String)
    
    // Simple error enums only carry a message
    case Serde(message: String)
    
    // Simple error enums only carry a message
    case Encrypt(message: String)
    
    // Simple error enums only carry a message
    case Decrypt(message: String)
    
    // Simple error enums only carry a message
    case Utf8(message: String)
    
    // Simple error enums only carry a message
    case WrongPassword(message: String)
    
    // Simple error enums only carry a message
    case EthSignature(message: String)
    
    // Simple error enums only carry a message
    case Provider(message: String)
    
    // Simple error enums only carry a message
    case InsufficientGasFunds(message: String)
    
    // Simple error enums only carry a message
    case InvalidAddress(message: String)
    
    // Simple error enums only carry a message
    case AbiError(message: String)
    
    // Simple error enums only carry a message
    case FromAddressMismatch(message: String)
    
    // Simple error enums only carry a message
    case ChainIdMismatch(message: String)
    

    fileprivate static func uniffiErrorHandler(_ error: RustBuffer) throws -> Error {
        return try FfiConverterTypeWalletError.lift(error)
    }
}


public struct FfiConverterTypeWalletError: FfiConverterRustBuffer {
    typealias SwiftType = WalletError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> WalletError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .DerivationParse(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 2: return .Mnemonic(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 3: return .Signature(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 4: return .Serde(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 5: return .Encrypt(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 6: return .Decrypt(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 7: return .Utf8(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 8: return .WrongPassword(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 9: return .EthSignature(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 10: return .Provider(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 11: return .InsufficientGasFunds(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 12: return .InvalidAddress(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 13: return .AbiError(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 14: return .FromAddressMismatch(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 15: return .ChainIdMismatch(
            message: try FfiConverterString.read(from: &buf)
        )
        

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: WalletError, into buf: inout [UInt8]) {
        switch value {

        

        
        case .DerivationParse(_ /* message is ignored*/):
            writeInt(&buf, Int32(1))
        case .Mnemonic(_ /* message is ignored*/):
            writeInt(&buf, Int32(2))
        case .Signature(_ /* message is ignored*/):
            writeInt(&buf, Int32(3))
        case .Serde(_ /* message is ignored*/):
            writeInt(&buf, Int32(4))
        case .Encrypt(_ /* message is ignored*/):
            writeInt(&buf, Int32(5))
        case .Decrypt(_ /* message is ignored*/):
            writeInt(&buf, Int32(6))
        case .Utf8(_ /* message is ignored*/):
            writeInt(&buf, Int32(7))
        case .WrongPassword(_ /* message is ignored*/):
            writeInt(&buf, Int32(8))
        case .EthSignature(_ /* message is ignored*/):
            writeInt(&buf, Int32(9))
        case .Provider(_ /* message is ignored*/):
            writeInt(&buf, Int32(10))
        case .InsufficientGasFunds(_ /* message is ignored*/):
            writeInt(&buf, Int32(11))
        case .InvalidAddress(_ /* message is ignored*/):
            writeInt(&buf, Int32(12))
        case .AbiError(_ /* message is ignored*/):
            writeInt(&buf, Int32(13))
        case .FromAddressMismatch(_ /* message is ignored*/):
            writeInt(&buf, Int32(14))
        case .ChainIdMismatch(_ /* message is ignored*/):
            writeInt(&buf, Int32(15))

        
        }
    }
}


extension WalletError: Equatable, Hashable {}

extension WalletError: Error { }

fileprivate struct FfiConverterSequenceUInt8: FfiConverterRustBuffer {
    typealias SwiftType = [UInt8]

    public static func write(_ value: [UInt8], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterUInt8.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [UInt8] {
        let len: Int32 = try readInt(&buf)
        var seq = [UInt8]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterUInt8.read(from: &buf))
        }
        return seq
    }
}

fileprivate struct FfiConverterSequenceString: FfiConverterRustBuffer {
    typealias SwiftType = [String]

    public static func write(_ value: [String], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterString.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [String] {
        let len: Int32 = try readInt(&buf)
        var seq = [String]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterString.read(from: &buf))
        }
        return seq
    }
}

public func decryptJson(encrypted: String, password: String, chainId: UInt64) throws -> Wallet {
    return try  FfiConverterTypeWallet.lift(
        try rustCallWithError(FfiConverterTypeWalletError.lift) {
    uniffi_aethers_fn_func_decrypt_json(
        FfiConverterString.lower(encrypted),
        FfiConverterString.lower(password),
        FfiConverterUInt64.lower(chainId),$0)
}
    )
}

public func decryptJsonBytes(encrypted: [UInt8], password: [UInt8], chainId: UInt64) throws -> Wallet {
    return try  FfiConverterTypeWallet.lift(
        try rustCallWithError(FfiConverterTypeWalletError.lift) {
    uniffi_aethers_fn_func_decrypt_json_bytes(
        FfiConverterSequenceUInt8.lower(encrypted),
        FfiConverterSequenceUInt8.lower(password),
        FfiConverterUInt64.lower(chainId),$0)
}
    )
}

public func ecRecover(signature: [UInt8], message: [UInt8]) throws -> String {
    return try  FfiConverterString.lift(
        try rustCallWithError(FfiConverterTypeWalletError.lift) {
    uniffi_aethers_fn_func_ec_recover(
        FfiConverterSequenceUInt8.lower(signature),
        FfiConverterSequenceUInt8.lower(message),$0)
}
    )
}

public func fromMnemonic(mnemonic: String, password: String, chainId: UInt64) throws -> Wallet {
    return try  FfiConverterTypeWallet.lift(
        try rustCallWithError(FfiConverterTypeWalletError.lift) {
    uniffi_aethers_fn_func_from_mnemonic(
        FfiConverterString.lower(mnemonic),
        FfiConverterString.lower(password),
        FfiConverterUInt64.lower(chainId),$0)
}
    )
}

public func implVersion()  -> String {
    return try!  FfiConverterString.lift(
        try! rustCall() {
    uniffi_aethers_fn_func_impl_version($0)
}
    )
}

public func initLogger()  {
    try! rustCall() {
    uniffi_aethers_fn_func_init_logger($0)
}
}



public func providerFromUrl(url: String) throws -> ChainProvider {
    return try  FfiConverterTypeChainProvider.lift(
        try rustCallWithError(FfiConverterTypeProviderError.lift) {
    uniffi_aethers_fn_func_provider_from_url(
        FfiConverterString.lower(url),$0)
}
    )
}

private enum InitializationResult {
    case ok
    case contractVersionMismatch
    case apiChecksumMismatch
}
// Use a global variables to perform the versioning checks. Swift ensures that
// the code inside is only computed once.
private var initializationResult: InitializationResult {
    // Get the bindings contract version from our ComponentInterface
    let bindings_contract_version = 24
    // Get the scaffolding contract version by calling the into the dylib
    let scaffolding_contract_version = ffi_aethers_uniffi_contract_version()
    if bindings_contract_version != scaffolding_contract_version {
        return InitializationResult.contractVersionMismatch
    }
    if (uniffi_aethers_checksum_func_decrypt_json() != 15248) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_aethers_checksum_func_decrypt_json_bytes() != 52540) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_aethers_checksum_func_ec_recover() != 23223) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_aethers_checksum_func_from_mnemonic() != 35211) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_aethers_checksum_func_impl_version() != 33889) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_aethers_checksum_func_init_logger() != 49144) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_aethers_checksum_func_provider_from_url() != 41634) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_aethers_checksum_method_erc20contract_token_approve() != 18570) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_aethers_checksum_method_erc20contract_token_balance_of() != 13092) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_aethers_checksum_method_erc20contract_token_decimals() != 42934) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_aethers_checksum_method_erc20contract_token_transfer() != 13383) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_aethers_checksum_method_erc20contract_token_transfer_from() != 10329) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_aethers_checksum_method_erc20contract_transfer_bridge_out() != 8271) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_aethers_checksum_method_erc721contract_nft_current_price() != 43150) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_aethers_checksum_method_erc721contract_nft_mint() != 8536) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_aethers_checksum_method_erc721contract_nft_owner_of() != 40828) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_aethers_checksum_method_erc721contract_nft_safe_transfer_from() != 40845) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_aethers_checksum_method_erc721contract_nft_total_supply() != 19495) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_aethers_checksum_method_wallet_chain_id() != 29198) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_aethers_checksum_method_wallet_encrypt_json() != 44651) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_aethers_checksum_method_wallet_recover_phrase() != 16706) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_aethers_checksum_method_wallet_request_accounts() != 15608) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_aethers_checksum_method_wallet_send_transaction() != 25120) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_aethers_checksum_method_wallet_sign_typed_message() != 23720) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_aethers_checksum_method_wallet_switch_chain() != 35509) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_aethers_checksum_constructor_erc20contract_new() != 18221) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_aethers_checksum_constructor_erc721contract_new() != 34681) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_aethers_checksum_constructor_wallet_new() != 11262) {
        return InitializationResult.apiChecksumMismatch
    }

    return InitializationResult.ok
}

private func uniffiEnsureInitialized() {
    switch initializationResult {
    case .ok:
        break
    case .contractVersionMismatch:
        fatalError("UniFFI contract version mismatch: try cleaning and rebuilding your project")
    case .apiChecksumMismatch:
        fatalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
}